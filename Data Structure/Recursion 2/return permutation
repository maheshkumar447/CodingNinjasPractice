Return Permutations - String
Send Feedback
Given a string S, find and return all the possible permutations of the input string.
Note 1 : The order of permutations is not important.
Note 2 : If original string contains duplicate characters, permutations will also be duplicates.
Input Format :
String S
Output Format :
All permutations (in different lines)
Sample Input :
abc
Sample Output :
abc
acb
bac
bca
cab
cba


public class solution {
	//  public static int fact(int n) {
	// 	int fact = 1;
	// 	for(int i = n;i >= 1;i--) {
	// 		fact = fact * i;
	// 	}
	// 	return fact;
	// }

	public static String[] permutationOfString(String input){
		// Write your code here
        
        
        if(input.length() == 0){
            String output[] = {""};
            return output;
        }
        
        String smallerOutput[] = permutationOfString(input.substring(1));
        
        String output[] = new String[input.length() * smallerOutput.length];
        int k  =0 ;
        for(int i = 0;i<smallerOutput.length;i++){
            String currentString = smallerOutput[i];
            for(int j = 0;j<=currentString.length();j++){
                output[k] = currentString.substring(0,j) + input.charAt(0) + currentString.substring(j);
                k++;
            }
        }
        
        return output;
        
        
        
        
        
        
        
        
        
//         if(input.length() == 1){
// 		      String[] retVal = {input};
// 	        return retVal;
// 	      }
// 	      String[] rop = permutationOfString(input.substring(1));
// 	      String[] tp = new String[fact(rop[0].length() + 1)];
// 	      int k = 0;
// 	      for(int i = 0;i < rop.length;i++){
// 	    	  String temp = rop[i];
// 	    	for(int j = 0;j <= temp.length();j++,k++) {
// 	    		tp[k] = temp.substring(0,j) + input.charAt(0) + temp.substring(j);
// 	    	}
// 	      }
// 			return tp;
	}
	
}
