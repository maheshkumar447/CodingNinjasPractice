Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 


/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
		quickSort(input,0,input.length-1);
        
	}
    
    public static void quickSort(int [] input, int start, int end){
        if(start>=end){
            return;
        }
        
        int pivotPosAns = partition(input,start,end);
        
        quickSort(input,start,pivotPosAns-1);
        quickSort(input,pivotPosAns+1,end);
    }
    
    public static int partition(int [] input, int start, int end){
        
        int i =start;
        int j = end;
        
        int count =0;
         for(int x = start;x<=end;x++){
             if(input[start]>input[x]){
                 count++;
             }
         }
        
        int pivotPos = start+count;
        swap(input,start,pivotPos);
        
        while(i<=pivotPos-1 && j>=pivotPos+1){
            while(input[i]<input[pivotPos]){
                i++;
            }
            while(input[j]>=input[pivotPos]){
                j--;
            }
            if(i>=pivotPos || j<=pivotPos){
            break;
            }else{
                swap(input,i,j);
            }
        }
        return pivotPos;
        
        
    }
    
    public static void swap(int [] input,int i,int j){
        int temp=input[i];
        input[i] = input[j];
        input[j] = temp;
    }

	
}
