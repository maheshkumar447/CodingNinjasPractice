Code : Max Priority Queue
Send Feedback
Implement the class for Max Priority Queue which includes following functions -
1. getSize -
Return the size of priority queue i.e. number of elements present in the priority queue.
2. isEmpty -
Check if priority queue is empty or not. Return true or false accordingly.
3. insert -
Given an element, insert that element in the priority queue at the correct position.
4. getMax -
Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
5. removeMax -
Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
Note : main function is given for your reference which we are using internally to test the class.


import java.util.ArrayList;
public class PQ {
	// Complete this class
    private ArrayList<Integer> heap;

    public PQ(){
        heap = new ArrayList<>();
    }
    
	boolean isEmpty() {
		// Implement the isEmpty() function here
        return heap.size() == 0;
	}

	int getSize() {
		// Implement the getSize() function here
        return heap.size();
	}

	int getMax() {
		// Implement the getMax() function here
        return heap.get(0);
	}

	void insert(int element) {
		// Implement the insert() function here
        heap.add(element);
        
        int childIndex = heap.size()-1;
        int parentIndex = (childIndex - 1)/2;
        
        while(childIndex > 0){
            
            if(heap.get(parentIndex) < heap.get(childIndex)){
                int temp = heap.get(parentIndex);
                heap.set(parentIndex, heap.get(childIndex));
                heap.set(childIndex, temp);
                childIndex = parentIndex;
                parentIndex = (childIndex - 1)/2;
            }
            else{
                return;
            }
        }
        
	}

	int removeMax(){
		// Implement the removeMax() function here\
        
        int ans = heap.get(0);
        heap.set(0, heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        
        int parentIndex = 0;
        int leftChild = parentIndex * 2 + 1;
        int rightChild = parentIndex * 2 + 2;
        
        while(leftChild < heap.size() && rightChild < heap.size()){
            int max = Math.max(heap.get(parentIndex), Math.max(heap.get(leftChild), heap.get(rightChild)));
            
            if(max == heap.get(leftChild)){
                int temp = heap.get(parentIndex);
                heap.set(parentIndex, heap.get(leftChild));
                heap.set(leftChild, temp);
                parentIndex = leftChild;
                leftChild = parentIndex * 2 + 1;
                rightChild = parentIndex * 2 + 2;
            }
            else if(max == heap.get(rightChild)){
                int temp = heap.get(parentIndex);
                heap.set(parentIndex, heap.get(rightChild));
                heap.set(rightChild, temp);
                parentIndex = rightChild;
                leftChild = parentIndex * 2 + 1;
                rightChild = parentIndex * 2 + 2;
            }
            else{
                return ans;
            }
        }
        
        return ans;
	}
}

// public class PriorityQueueException extends Exception {

// }
