Running Median
Send Feedback
You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer 'N', denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.
Output Format :
Print the running median for every integer added to the running list in one line (space-separated).
Input Constraints
0 <= N <= 10 ^ 5
1 <= ARR[i] <= 10 ^ 5

Time Limit: 1 sec
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6 4 2 2 3 4
Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 2 :
5
5 4 3 2 1
Sample Output 2 :
5 4 4 3 3




import java.util.Comparator;
import java.util.PriorityQueue;


class MedianComparator implements Comparator<Integer>{

    @Override
    public int compare(Integer first, Integer second) {
        return (second-first);
    }
}

public class Solution {

	public static void findMedian(int arr[])  {
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
    
         
        int n = arr.length;

        MedianComparator medianComparator = new MedianComparator();
        PriorityQueue<Integer> firstHalf = new PriorityQueue<>(medianComparator);
        PriorityQueue<Integer> secondHalf = new PriorityQueue<>();

        int median;

        for (int i = 1; i <= n; i++) {
            if (!firstHalf.isEmpty() && firstHalf.peek() > arr[i - 1]) {
                firstHalf.add(arr[i - 1]);
                if (firstHalf.size() > secondHalf.size() + 1) {
                    secondHalf.add(firstHalf.poll());
                }
            } else {
                secondHalf.add(arr[i - 1]);
                if (secondHalf.size() > firstHalf.size() + 1) {
                    firstHalf.add(secondHalf.poll());
                }
            }
            if (i % 2 == 1) {
                if (secondHalf.size() > firstHalf.size()) {
                    median = secondHalf.peek();
                } else {
                    median = firstHalf.peek();
                }
            } else {
                median = (firstHalf.peek() + secondHalf.peek()) / 2;
            }
            System.out.print(median + " ");

        }

    }
}
