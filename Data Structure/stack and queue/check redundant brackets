Check redundant brackets
Send Feedback
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.
Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Input Format :
The first and the only line of input contains a string expression, without any spaces in between.
Output Format :
The first and the only line of output will print either 'true' or 'false'(without the quotes) denoting whether the input expression contains redundant brackets or not.
Note:
You are not required to print the expected result. It has already been taken care of.
Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false



import java.util.Stack;
public class Solution {
	// public static boolean isRedundant = false;
	// public static boolean consecutiveStartBrackets = false;

	public static boolean checkRedundantBrackets(String expression) {
		//Your code goes here
//          Stack<Character> stack = new Stack<>();
		
		
// 		if(stack.isEmpty()==true && expression.charAt(0)==')')
// 		{
// 			return false;
// 		}
// 		for(int i =0;i<expression.length();i++)
// 		{
// 			if(expression.charAt(i)=='(')
// 			{
// 				stack.push(expression.charAt(i));
// 			}
// 			else if(expression.charAt(i)==')'&& (stack.peek()=='(' && stack.isEmpty()!=true)) {
// 				stack.pop();
// 			}
// 			else if(expression.charAt(i)==')' && stack.isEmpty()==true)
// 			{
// 				return false;
// 			}
			
// 		}
		
// 		return stack.isEmpty();
        
//        int i = 0;
// 		Stack<Character> stackLL = new Stack<>();
// 		for (i = 0; i < expression.length() - 1; i++) {
// 			if (expression.charAt(i) == '(') {
// 				if (expression.charAt(i + 1) == ')') {
// 					isRedundant = true;
// 					break;
// 				} else if (expression.charAt(i + 1) == '(') {
// 					consecutiveStartBrackets = true;
// 				}
// 				stackLL.push(expression.charAt(i));
// 			} 
// 			if (expression.charAt(i) == ')') {
// 				if (expression.charAt(i + 1) == ')') {
// 					if (consecutiveStartBrackets == true) {
// 						isRedundant = true;
// 						break;
// 					}
// 				} else if (!stackLL.isEmpty() && stackLL.pop() == '(') {
// 					stackLL.pop();
// 					continue;
// 				} else {
// 					break;
// 				}
// 			}
// 		}
// return isRedundant;
        
         // For keeping track of opening and closing brackets.
        Stack<Character> brackets = new Stack<Character>();

        int n = expression.length();

        // Iterate through the string.
        for (int i = 0; i < n; i++) 
        {

            // Push the current character to the stack if it is an operator or an opening bracket.
            if (expression.charAt(i) == '(' || expression.charAt(i) == '+' || expression.charAt(i) == '-' || expression.charAt(i) == '*' || expression.charAt(i) == '/') 
            {
                brackets.push(expression.charAt(i));
            }

            // If the current character is a closing bracket.
            else if (expression.charAt(i) == ')') 
            {
                // For checking if the current bracket is redundant or not.
                boolean isRedundant = true;

                // Keep popping from the stack till we reach an opening bracket.
                while (brackets.peek() != '(') 
                {
                    // If we find a operator then the current bracket is not redundant.
                    if (brackets.peek() == '+' || brackets.peek() == '-' || brackets.peek() == '*' || brackets.peek() == '/') 
                    {
                        isRedundant = false;
                    }

                    brackets.pop();
                }

                brackets.pop();

                // Return true if we did not find any operator before finding the opening bracket.
                if (isRedundant == true) 
                {
                    return true;
                }
            }
        }

        // If no bracket is redundant then return false.
        return false;
	}
}
