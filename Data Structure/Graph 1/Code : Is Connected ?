Code : Is Connected ?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 



import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;
public class Solution {

	public static void isConnectedHelper(int edges[][], int sV, boolean visited[]){
        visited[sV] = true;
        int n = edges.length;
        for(int i=0; i<n; i++){
            if(edges[sV][i] == 1 && !visited[i]){
                isConnectedHelper(edges, i, visited);
                visited[i] = true;
            }
        }
    }

    public static boolean isConnected(int edges[][]){
        boolean [] visited = new boolean[edges.length];
        //calling helper function to traverse graph
        isConnectedHelper(edges,0,visited);

        //for checking whether all vertices are marked visited or not
        //if atleast one is left then return false
        for(int i=0; i<visited.length; i++){
            if(!visited[i]){
                return false;
            }
        }

        return true;

    }


    public static void main(String[] args) {
        int n;
        int e;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        e = sc.nextInt();

        int edges[][] = new int [n][n];
        for(int i=0; i<e; i++){
            int sV = sc.nextInt();
            int eV = sc.nextInt();
            edges[sV][eV] = 1;
            edges[eV][sV] = 1;
        }
        //as a base case
        if(n==0 && e==0 || (n==2 && e==1) || n==1){
            System.out.println(true);
            return;
        }
        System.out.println(isConnected(edges));
    }

}
