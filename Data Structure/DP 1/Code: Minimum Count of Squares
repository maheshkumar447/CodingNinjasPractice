Code: Minimum Count of Squares
Send Feedback
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1


public class Solution {

	public static int minCount(int n) {
        
        //recursive way
//         if(n<=3){
//             return n;
//         }
        
//         int res = n;
		
//         for(int i=1; i<=n; i++){
//             int temp = i * i;
//             if (temp > n)
//                 break;
//             else
//                 res = Math.min(res, 1 + minCount(n - (i*i)));
//         }
        
//         return res;
        
        
        //dynamic programming
        int storage[] = new int[n+1];
        
        storage[0] = 0;
        storage[1] = 1;
        
        for(int i=2; i<=n ; i++){
            storage[i] = Integer.MAX_VALUE;
            for(int j=1; i - (j*j) >= 0; j++){
            	storage[i] = Math.min(storage[i], storage[i - (j*j)]);
            }
            storage[i] += 1;
        }
        
        return storage[n];
	}
    
     
}
